#!/bin/bash

# ==========================================
# Configuration and Global Variables
# ==========================================

# File to store packs
AIDER_PACK_CONFIG_FILE="${AIDER_PACK_CONFIG_FILE:=$HOME/.aider-pack.json}"
AIDER_PACK_COMPLETION_SHELL="${AIDER_PACK_COMPLETION_SHELL:=bash}"
AIDER_PACK_COMPLETION_AUTOREGENERATE="${AIDER_PACK_COMPLETION_AUTOREGENERATE:=true}"
AIDER_PACK_COMPLETION_FILE="${AIDER_PACK_COMPLETION_FILE:=$HOME/.aider-pack.completion}"

# File to cache aider options
AIDER_OPTIONS_CACHE="$HOME/.aider-pack-options-cache"

# Array of predefined models
AIDER_PACK_MODELS=("gpt-4o" "gpt-4o-mini" "claude-3-5-sonnet-20240620" "openrouter/deepseek/deepseek-coder" "openrouter/google/gemini-pro-1.5" "groq/llama-3.1-70b-versatile" "ollama/qwen2.5-coder:latest" "ollama/qwen2.5:32b")

# Colors for pretty output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# ==========================================
# Utility Functions
# ==========================================

# Function to convert pack name to sluggified version
sluggify() {
    echo "$1" | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-z0-9]/-/g' -e 's/--*/-/g' -e 's/^-//' -e 's/-$//'
}

clear_the_screen() {
    printf "\n"
}

# Function to display a centered header
display_header() {
    local title="$1"
    local width=40
    local padding=$(((width - ${#title}) / 2))
    printf "\n${BLUE}%${width}s${NC}\n" | tr ' ' '═'
    printf "${BLUE}%*s%s%*s${NC}\n" $padding "" "$title" $padding ""
    printf "${BLUE}%${width}s${NC}\n\n" | tr ' ' '═'
}

# Function to get user confirmation
get_confirmation() {
    local prompt="$1"
    local response
    read -p "$prompt (y/n): " response
    case $response in
    [Yy]*) return 0 ;;
    *) return 1 ;;
    esac
}

# Function to validate input
validate_input() {
    local input="$1"
    local min="$2"
    local max="$3"

    if [[ "$input" =~ ^[0-9]+$ ]] && [ "$input" -ge "$min" ] && [ "$input" -le "$max" ]; then
        return 0
    elif [[ "$input" =~ ^[bB]$ ]]; then
        return 0
    else
        return 1
    fi

}

# ==========================================
# Pack Management Functions
# ==========================================

# Function to save or update a pack
save_pack() {
    local pack_name=$1
    local model=$2
    local editor_model=$3
    local weak_model=$4
    local additional_config=$5
    local env_vars=$6

    pack_json=$(jq -n \
        --arg model "$model" \
        --arg editor_model "$editor_model" \
        --arg weak_model "$weak_model" \
        --arg additional_config "$additional_config" \
        --arg env_vars "$env_vars" \
        '{model: $model, editor_model: $editor_model, weak_model: $weak_model, additional_config: $additional_config, env_vars: $env_vars}')

    if [ ! -f "$AIDER_PACK_CONFIG_FILE" ]; then
        echo "{\"$pack_name\": $pack_json, \"last_used_pack\": \"$pack_name\"}" >"$AIDER_PACK_CONFIG_FILE"
    else
        jq --arg name "$pack_name" --argjson pack "$pack_json" '.[$name] = $pack' "$AIDER_PACK_CONFIG_FILE" >"${AIDER_PACK_CONFIG_FILE}.tmp" && mv "${AIDER_PACK_CONFIG_FILE}.tmp" "$AIDER_PACK_CONFIG_FILE"
    fi

    if [ "$AIDER_PACK_COMPLETION_AUTOREGENERATE" = "true" ]; then
        regenerate_completion_file
    fi
}

# Function to delete a pack
delete_pack() {
    local pack_name=$1
    if [ -f "$AIDER_PACK_CONFIG_FILE" ]; then
        if jq -e ".\"$pack_name\"" "$AIDER_PACK_CONFIG_FILE" >/dev/null 2>&1; then
            jq "del(.\"$pack_name\")" "$AIDER_PACK_CONFIG_FILE" >"${AIDER_PACK_CONFIG_FILE}.tmp" && mv "${AIDER_PACK_CONFIG_FILE}.tmp" "$AIDER_PACK_CONFIG_FILE"
            echo -e "${GREEN}Pack '$pack_name' has been deleted successfully.${NC}"

            # Update last_used_pack if the deleted pack was the last used one
            local last_used=$(jq -r '.last_used_pack // empty' "$AIDER_PACK_CONFIG_FILE")
            if [ "$last_used" = "$pack_name" ]; then
                jq 'del(.last_used_pack)' "$AIDER_PACK_CONFIG_FILE" >"${AIDER_PACK_CONFIG_FILE}.tmp" && mv "${AIDER_PACK_CONFIG_FILE}.tmp" "$AIDER_PACK_CONFIG_FILE"
            fi
        else
            echo -e "${RED}Pack '$pack_name' not found.${NC}"
        fi
    else
        echo -e "${RED}No packs file found.${NC}"
    fi

    if [ "$AIDER_PACK_COMPLETION_AUTOREGENERATE" = "true" ]; then
        regenerate_completion_file
    fi
}

# Function to manage environment variables
manage_env_vars() {
    local current_env_vars="$1"

    echo -e "\n${YELLOW}Current environment variables:${NC}"
    echo "$current_env_vars"
    echo -e "\n${YELLOW}Enter new environment variables (format: KEY1=VALUE1 KEY2=VALUE2):${NC}"
    echo -e "${YELLOW}Press Enter to keep the current variables, or enter 'clear' to remove all variables.${NC}"
    read -p "> " input_vars

    if [ "$input_vars" = "clear" ]; then
        echo ""
    elif [ -z "$input_vars" ]; then
        echo "$current_env_vars"
    else
        echo "$input_vars"
    fi
}

# Function to execute a pack
execute_pack() {
    local pack_name=$1
    shift # Remove the pack name from the arguments
    if [ -f "$AIDER_PACK_CONFIG_FILE" ]; then
        pack_data=$(jq -r ".[\"$pack_name\"]" "$AIDER_PACK_CONFIG_FILE")
        if [ "$pack_data" != "null" ]; then
            model=$(echo "$pack_data" | jq -r '.model')
            editor_model=$(echo "$pack_data" | jq -r '.editor_model')
            weak_model=$(echo "$pack_data" | jq -r '.weak_model')
            additional_config=$(echo "$pack_data" | jq -r '.additional_config')
            env_vars=$(echo "$pack_data" | jq -r '.env_vars')

            # Set environment variables
            if [ -n "$env_vars" ]; then
                eval "export $env_vars"
            fi

            # Save the last used pack
            jq --arg name "$pack_name" '.last_used_pack = $name' "$AIDER_PACK_CONFIG_FILE" >"${AIDER_PACK_CONFIG_FILE}.tmp" && mv "${AIDER_PACK_CONFIG_FILE}.tmp" "$AIDER_PACK_CONFIG_FILE"

            # Construct and execute the aider command
            exec aider --model "$model" --editor-model "$editor_model" --weak-model "$weak_model" $additional_config "$@"
        else
            echo -e "${RED}Pack not found: $pack_name${NC}"
            exit 1
        fi
    else
        echo -e "${RED}No packs file found.${NC}"
        exit 1
    fi
}

# ==========================================
# Menu Functions
# ==========================================

# Function to show main menu
show_main_menu() {
    while true; do
        clear_the_screen
        display_header "Aider Pack Manager"
        echo -e "1. ${YELLOW}List${NC} and select existing packs"
        echo -e "2. ${YELLOW}Create${NC} a new pack"
        echo -e "3. ${YELLOW}Edit${NC} an existing pack"
        echo -e "4. ${YELLOW}Delete${NC} an existing pack"
        echo -e "5. ${YELLOW}Exit${NC}"
        echo
        read -p "Enter your choice (1-5): " choice
        case $choice in
        1) list_and_select_packs ;;
        2) create_new_pack ;;
        3) edit_existing_pack ;;
        4) delete_existing_pack ;;
        5) exit 0 ;;
        *)
            echo -e "${RED}Invalid choice. Please try again.${NC}"
            sleep 2
            ;;
        esac
    done
}

# Function to list and select existing packs
list_and_select_packs() {
    while true; do
        clear_the_screen
        if [ ! -f "$AIDER_PACK_CONFIG_FILE" ] || [ ! -s "$AIDER_PACK_CONFIG_FILE" ]; then
            echo -e "${YELLOW}No packs found. Please create a new pack.${NC}"
            read -p "Press Enter to return to the main menu..."
            return
        fi

        display_header "Existing Packs"

        local packs=()

        # Read the pack names into the array
        jq -r 'keys[] | select(. != "last_used_pack")' "$AIDER_PACK_CONFIG_FILE" | while read -r pack; do
            packs+=("$pack")
            echo "$((i++)). $pack"
        done


        echo "B. Back to main menu"

        read -p "Enter your choice (1-${#packs[@]} or B): " choice
        if validate_input "$choice" 1 ${#packs[@]} || [[ "$choice" =~ ^[bB]$ ]]; then
            if [[ "$choice" =~ ^[bB]$ ]]; then
                show_main_menu
                return
            else
                execute_pack "${packs[$((choice - 1))]}"
                read -p "Press Enter to continue..."
            fi
        else
            echo -e "${RED}Invalid selection. Please try again.${NC}"
            sleep 1
        fi
    done
}

# Function to create a new pack
create_new_pack() {
    clear_the_screen
    display_header "Create a New Pack"

    read -p "Enter a name for the pack (it will be converted to a sluggified name): " pack_name
    sluggified=$(sluggify "$pack_name")

    echo -e "\n${YELLOW}Select a main model:${NC}"
    select model in "${AIDER_PACK_MODELS[@]}"; do
        if [[ -n $model ]]; then
            break
        else
            echo -e "${RED}Invalid selection. Please try again.${NC}"
        fi
    done

    echo -e "\n${YELLOW}Select an editor model:${NC}"
    select editor_model in "${AIDER_PACK_MODELS[@]}"; do
        if [[ -n $editor_model ]]; then
            break
        else
            echo -e "${RED}Invalid selection. Please try again.${NC}"
        fi
    done

    echo -e "\n${YELLOW}Select a weak model:${NC}"
    select weak_model in "${AIDER_PACK_MODELS[@]}"; do
        if [[ -n $weak_model ]]; then
            break
        else
            echo -e "${RED}Invalid selection. Please try again.${NC}"
        fi
    done

    echo -e "\n${YELLOW}Enter additional configuration options (optional):${NC}"
    echo "These can be any regular options available in aider, e.g., --no-auto-commits --no-stream"
    read -p "Additional options: " additional_config

    echo -e "\n${YELLOW}Set Environment Variables:${NC}"
    echo "Enter environment variables for this pack (e.g., OPENAI_API_KEY=your_key)"
    read -p "Optional: " env_vars

    clear_the_screen
    display_header "Pack Details"

    echo -e "Pack name:                   ${GREEN}$pack_name${NC}"
    echo -e "Sluggified name:             ${GREEN}$sluggified${NC}"
    echo -e "Model:                       ${GREEN}$model${NC}"
    echo -e "Editor model:                ${GREEN}$editor_model${NC}"
    echo -e "Weak model:                  ${GREEN}$weak_model${NC}"
    echo -e "Additional config:           ${GREEN}$additional_config${NC}"
    echo -e "Environment variables:       ${GREEN}$env_vars${NC}"

    echo
    if get_confirmation "Do you want to save this pack?"; then
        save_pack "$sluggified" "$model" "$editor_model" "$weak_model" "$additional_config" "$env_vars"
        echo -e "${GREEN}Pack saved successfully.${NC}"
    else
        echo -e "${YELLOW}Pack creation cancelled.${NC}"
    fi

    read -p "Press Enter to return to the main menu..."
}

# Function to edit an existing pack
edit_existing_pack() {
    while true; do
        clear_the_screen
        if [ ! -f "$AIDER_PACK_CONFIG_FILE" ] || [ ! -s "$AIDER_PACK_CONFIG_FILE" ]; then
            echo -e "${YELLOW}No packs found. Please create a new pack.${NC}"
            read -p "Press Enter to return to the main menu..."
            return
        fi

        display_header "Edit Existing Pack"

        mapfile -t packs < <(jq -r 'keys[] | select(. != "last_used_pack")' "$AIDER_PACK_CONFIG_FILE")

        echo -e "${YELLOW}Select a pack to edit:${NC}"
        for i in "${!packs[@]}"; do
            echo "$((i + 1)). ${packs[i]}"
        done
        echo "$((${#packs[@]} + 1)). Back to main menu"

        read -p "Enter your choice (1-$((${#packs[@]} + 1))): " choice
        if validate_input "$choice" 1 $((${#packs[@]} + 1)); then
            if [ "$choice" -eq "$((${#packs[@]} + 1))" ]; then
                return
            else
                edit_pack "${packs[$((choice - 1))]}"
            fi
        else
            echo -e "${RED}Invalid selection. Please try again.${NC}"
            sleep 2
        fi
    done
}

# Function to edit a specific pack
edit_pack() {
    local pack_name=$1
    local pack_data=$(jq -r ".[\"$pack_name\"]" "$AIDER_PACK_CONFIG_FILE")
    local current_model=$(echo "$pack_data" | jq -r '.model')
    local current_editor_model=$(echo "$pack_data" | jq -r '.editor_model')
    local current_weak_model=$(echo "$pack_data" | jq -r '.weak_model')
    local current_additional_config=$(echo "$pack_data" | jq -r '.additional_config')
    local current_env_vars=$(echo "$pack_data" | jq -r '.env_vars')

    clear_the_screen
    display_header "Edit Pack: $pack_name"
    echo -e "${YELLOW}Current model: $current_model${NC}"
    echo -e "${YELLOW}Select a new model (or press Enter to keep current):${NC}\n"
    select model in "${AIDER_PACK_MODELS[@]}"; do
        if [[ -z $REPLY ]]; then
            model=$current_model
            break
        elif [[ -n $model ]]; then
            break
        else
            echo -e "${RED}Invalid selection. Please try again or press Enter to keep current.${NC}"
        fi
    done

    echo -e "\n${YELLOW}Current editor model: $current_editor_model${NC}\n"
    echo -e "${YELLOW}Select a new editor model (or press Enter to keep current):${NC}\n"
    select editor_model in "${AIDER_PACK_MODELS[@]}"; do
        if [[ -z $REPLY ]]; then
            editor_model=$current_editor_model
            break
        elif [[ -n $editor_model ]]; then
            break
        else
            echo -e "${RED}Invalid selection. Please try again or press Enter to keep current.${NC}"
        fi
    done

    echo -e "\n${YELLOW}Current weak model: $current_weak_model${NC}"
    echo -e "${YELLOW}Select a new weak model (or press Enter to keep current):${NC}"
    select weak_model in "${AIDER_PACK_MODELS[@]}"; do
        if [[ -z $REPLY ]]; then
            weak_model=$current_weak_model
            break
        elif [[ -n $weak_model ]]; then
            break
        else
            echo -e "${RED}Invalid selection. Please try again or press Enter to keep current.${NC}"
        fi
    done

    echo -e "\n${YELLOW}Current additional configuration:${NC}"
    echo "$current_additional_config"
    echo -e "${YELLOW}Enter new additional configuration (or press Enter to keep current):${NC}"
    read -p "Additional options: " additional_config
    if [[ -z $additional_config ]]; then
        additional_config=$current_additional_config
    fi

    env_vars=$(manage_env_vars "$current_env_vars")

    clear_the_screen
    display_header "Updated Pack Details"
    echo -e "Pack name:                   ${GREEN}$pack_name${NC}"
    echo -e "Model:                       ${GREEN}$model${NC}"
    echo -e "Editor model:                ${GREEN}$editor_model${NC}"
    echo -e "Weak model:                  ${GREEN}$weak_model${NC}"
    echo -e "Additional config:           ${GREEN}$additional_config${NC}"
    echo -e "Environment variables:       ${GREEN}$env_vars${NC}"
    echo
    if get_confirmation "Do you want to save these changes?"; then
        save_pack "$pack_name" "$model" "$editor_model" "$weak_model" "$additional_config" "$env_vars"
        echo -e "${GREEN}Pack updated successfully.${NC}"
    else
        echo -e "${YELLOW}Pack update cancelled.${NC}"
    fi

    read -p "Press Enter to continue..."

    if [ "$AIDER_PACK_COMPLETION_AUTOREGENERATE" = "true" ]; then
        regenerate_completion_file
    fi
}

# Function to delete an existing pack
delete_existing_pack() {
    while true; do
        clear_the_screen
        if [ ! -f "$AIDER_PACK_CONFIG_FILE" ] || [ ! -s "$AIDER_PACK_CONFIG_FILE" ]; then
            echo -e "${YELLOW}No packs found. Please create a new pack.${NC}"
            read -p "Press Enter to return to the main menu..."
            return
        fi

        display_header "Delete Existing Pack"

        mapfile -t packs < <(jq -r 'keys[] | select(. != "last_used_pack")' "$AIDER_PACK_CONFIG_FILE")

        echo -e "${YELLOW}Select a pack to delete:${NC}"
        for i in "${!packs[@]}"; do
            echo "$((i + 1)). ${packs[i]}"
        done
        echo "$((${#packs[@]} + 1)). Back to main menu"

        read -p "Enter your choice (1-$((${#packs[@]} + 1))): " choice
        if validate_input "$choice" 1 $((${#packs[@]} + 1)); then
            if [ "$choice" -eq "$((${#packs[@]} + 1))" ]; then
                return
            else
                local pack_to_delete="${packs[$((choice - 1))]}"
                if get_confirmation "Are you sure you want to delete the pack '$pack_to_delete'?"; then
                    delete_pack "$pack_to_delete"
                    read -p "Press Enter to continue..."
                else
                    echo -e "${YELLOW}Deletion cancelled.${NC}"
                    sleep 2
                fi
            fi
        else
            echo -e "${RED}Invalid selection. Please try again.${NC}"
            sleep 2
        fi
    done
}

# ==========================================
# Aider Options Management
# ==========================================

# Function to cache aider options
cache_aider_options() {
    aider --help | grep -E '^\s+--' | awk '{print $1}' | sed 's/,$//' >"$AIDER_OPTIONS_CACHE"
}

# Function to parse aider options
parse_aider_options() {
    if [ ! -f "$AIDER_OPTIONS_CACHE" ] || [ $(find "$AIDER_OPTIONS_CACHE" -mtime +1 -print) ]; then
        cache_aider_options
    fi
    cat "$AIDER_OPTIONS_CACHE"
}

# ==========================================
# Help and Usage Functions
# ==========================================

# Function to show usage information
show_usage() {
    echo "Usage: $0 [pack_name] [additional aider options]"
    echo
    echo "If no arguments are provided, the script will offer to use the last used pack or start in interactive mode."
    echo "If a pack name is provided, it will execute that pack with any additional options."
    echo
    echo "Examples:"
    echo "  $0                          # Use last pack or start in interactive mode"
    echo "  $0 my-pack                  # Execute the 'my-pack' configuration"
    echo "  $0 my-pack --no-auto-commits # Execute 'my-pack' with additional aider option"
    echo
    echo "Available packs:"
    if [ -f "$AIDER_PACK_CONFIG_FILE" ] && [ -s "$AIDER_PACK_CONFIG_FILE" ]; then
        local packs=()
        local i=1
        jq -r 'keys[] | select(. != "last_used_pack")' "$AIDER_PACK_CONFIG_FILE" | while read -r pack; do
            packs+=("$pack")
            echo "  - $pack"
        done
        if [ ${#packs[@]} -eq 0 ]; then
            echo "  No packs found. Use the interactive mode to create a pack."
        fi

        last_used_pack=$(jq -r '.last_used_pack // empty' "$AIDER_PACK_CONFIG_FILE")
        if [ -n "$last_used_pack" ]; then
            echo
            echo "Last used pack: $last_used_pack"
        fi
    else
        echo "  No packs file found or file is empty. Use the interactive mode to create a pack."
    fi
    echo
    suggest_completion_installation
}

# Function to suggest completion installation
suggest_completion_installation() {
    echo "To enable shell completion, follow these steps:"
    echo
    echo "For Bash:"
    echo "1. Add the following line to your ~/.bashrc file:"
    echo '   eval "$(aider-pack --completions bash)"'
    echo "2. Restart your shell or run:"
    echo "   source ~/.bashrc"
    echo
    echo "For Zsh:"
    echo "1. Add the following line to your ~/.zshrc file:"
    echo '   eval "$(aider-pack --completions zsh)"'
    echo "2. Restart your shell or run:"
    echo "   source ~/.zshrc"
}

# ==========================================
# Main Script Logic
# ==========================================

if [ $# -eq 0 ]; then
    if [ -f "$AIDER_PACK_CONFIG_FILE" ]; then
        last_used_pack=$(jq -r '.last_used_pack // empty' "$AIDER_PACK_CONFIG_FILE")
        if [ -n "$last_used_pack" ]; then
            echo -e "${YELLOW}Last used pack: $last_used_pack${NC}"
            read -p "Press Enter to use this pack, or any other key to go to the main menu: " choice
            if [ -z "$choice" ]; then
                execute_pack "$last_used_pack"
            fi
        fi
    fi
    show_main_menu
elif [ "$1" == "--completions" ]; then
    if [ "$2" == "bash" ]; then
        packs=$(jq -r 'keys[] | select(. != "last_used_pack")' "$AIDER_PACK_CONFIG_FILE" | tr '\n' ' ')
        echo "complete -W \"$packs\" aider-pack"
    elif [ "$2" == "zsh" ]; then
        packs=$(jq -r 'keys[] | select(. != "last_used_pack")' "$AIDER_PACK_CONFIG_FILE" | tr '\n' ' ')
        echo "compdef _aider-pack aider-pack"
        echo "_aider-pack() { compadd $packs }"
    else
        echo "Invalid shell type. Use 'bash' or 'zsh'."
        exit 1
    fi
    exit 0
elif [ "$1" == "--completions" ]; then
    if [ "$2" == "bash" ]; then
        echo 'complete -W "$(aider-pack --list-packs)" aider-pack'
    elif [ "$2" == "zsh" ]; then
        echo 'compdef _aider-pack aider-pack'
        echo '_aider-pack() { compadd $(aider-pack --list-packs) }'
    else
        echo "Invalid shell type. Use 'bash' or 'zsh'."
        exit 1
    fi
    exit 0
elif [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    show_usage
else
    execute_pack "$@"
fi
regenerate_completion_file() {
    if [ "$AIDER_PACK_COMPLETION_SHELL" = "bash" ]; then
        packs=$(jq -r 'keys[] | select(. != "last_used_pack")' "$AIDER_PACK_CONFIG_FILE" | tr '\n' ' ')
        echo "complete -W \"$packs\" aider-pack" >"$AIDER_PACK_COMPLETION_FILE"
    elif [ "$AIDER_PACK_COMPLETION_SHELL" = "zsh" ]; then
        packs=$(jq -r 'keys[] | select(. != "last_used_pack")' "$AIDER_PACK_CONFIG_FILE" | tr '\n' ' ')
        echo "compdef _aider-pack aider-pack" >"$AIDER_PACK_COMPLETION_FILE"
        echo "_aider-pack() { compadd $packs }" >>"$AIDER_PACK_COMPLETION_FILE"
    else
        echo "Invalid shell type. Use 'bash' or 'zsh'."
        exit 1
    fi
}
